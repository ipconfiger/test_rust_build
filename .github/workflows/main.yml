on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: get version
        run: echo "PACKAGE_VERSION=$(cat Cargo.toml | grep version | sed -n '1p' | cut -d '=' -f 2 | sed 's/\"//g' | sed 's/ //g')" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Musl Executable v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: false,
              prerelease: false
            })
            return data.id

  release:
    name: release ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-musl]
    steps:
      - uses: actions/checkout@master
      - name: Compile and release
        uses: rust-build/rust-build.action@v1.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          
          
  upload-assets:
    runs-on: ubuntu-latest
    needs: [create-release, release]
    
    steps:
      - uses: actions/checkout@v3
      - name: Strip binary (linux and macos)
        run: strip "target/x86_64-unknown-linux-musl/release/shuibiao"

      - name: Build archive
        shell: bash
        run: |
          mkdir archive
          cp README.md archive/
          cd archive
          cp "../target/x86_64-unknown-linux-musl/release/shuibiao" ./
          tar -czf "x86_64-unknown-linux-musl" README.md shuibiao
      - name: Upload archive
        uses: actions/upload-artifact@v1
        with:
          name: x86_64-unknown-linux-musl
          path: archive/x86_64-unknown-linux-musl
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}
          
  
